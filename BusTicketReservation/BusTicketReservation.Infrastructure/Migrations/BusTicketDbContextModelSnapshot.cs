// <auto-generated />
using System;
using BusTicketReservation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BusTicketReservation.Infrastructure.Migrations
{
    [DbContext(typeof(BusTicketDbContext))]
    partial class BusTicketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Bus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("BusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Buses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            BasePrice = 800m,
                            BusName = "Green Line Express",
                            CompanyName = "Green Line Paribahan",
                            TotalSeats = 40
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            BasePrice = 900m,
                            BusName = "Shyamoli Deluxe",
                            CompanyName = "Shyamoli Paribahan",
                            TotalSeats = 36
                        });
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.BusSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("BusId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("JourneyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("RouteId");

                    b.ToTable("BusSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7819f44-9e63-4627-941b-abfd14991a2f"),
                            ArrivalTime = new TimeSpan(0, 14, 0, 0, 0),
                            BusId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DepartureTime = new TimeSpan(0, 8, 0, 0, 0),
                            JourneyDate = new DateTime(2025, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("6d3fc7b9-7b0d-463d-b711-61f6b1e353b9"),
                            ArrivalTime = new TimeSpan(0, 14, 30, 0, 0),
                            BusId = new Guid("22222222-2222-2222-2222-222222222222"),
                            DepartureTime = new TimeSpan(0, 9, 30, 0, 0),
                            JourneyDate = new DateTime(2025, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("cd9b5037-4e14-420b-a844-b720b8132420"),
                            ArrivalTime = new TimeSpan(0, 14, 0, 0, 0),
                            BusId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DepartureTime = new TimeSpan(0, 8, 0, 0, 0),
                            JourneyDate = new DateTime(2025, 10, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("fc4da9a2-2175-489c-8ce0-e69a3a7f6313"),
                            ArrivalTime = new TimeSpan(0, 14, 30, 0, 0),
                            BusId = new Guid("22222222-2222-2222-2222-222222222222"),
                            DepartureTime = new TimeSpan(0, 9, 30, 0, 0),
                            JourneyDate = new DateTime(2025, 10, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("b329807e-515c-4711-ae4e-37dfeaf5a6e3"),
                            ArrivalTime = new TimeSpan(0, 14, 0, 0, 0),
                            BusId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DepartureTime = new TimeSpan(0, 8, 0, 0, 0),
                            JourneyDate = new DateTime(2025, 10, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("55110fae-4d52-4bd3-8be9-f0417c862a11"),
                            ArrivalTime = new TimeSpan(0, 14, 30, 0, 0),
                            BusId = new Guid("22222222-2222-2222-2222-222222222222"),
                            DepartureTime = new TimeSpan(0, 9, 30, 0, 0),
                            JourneyDate = new DateTime(2025, 10, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("f938eae3-381d-4ee2-8253-7106409f7616"),
                            ArrivalTime = new TimeSpan(0, 14, 0, 0, 0),
                            BusId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DepartureTime = new TimeSpan(0, 8, 0, 0, 0),
                            JourneyDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("8a84ae5e-590a-4b0a-a6fc-30f6b0f077ec"),
                            ArrivalTime = new TimeSpan(0, 14, 30, 0, 0),
                            BusId = new Guid("22222222-2222-2222-2222-222222222222"),
                            DepartureTime = new TimeSpan(0, 9, 30, 0, 0),
                            JourneyDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("4d57d387-3c57-4409-aab0-e752635a4b82"),
                            ArrivalTime = new TimeSpan(0, 14, 0, 0, 0),
                            BusId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DepartureTime = new TimeSpan(0, 8, 0, 0, 0),
                            JourneyDate = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("56987114-6df7-442a-a4ba-7f10f4a0e2b5"),
                            ArrivalTime = new TimeSpan(0, 14, 30, 0, 0),
                            BusId = new Guid("22222222-2222-2222-2222-222222222222"),
                            DepartureTime = new TimeSpan(0, 9, 30, 0, 0),
                            JourneyDate = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("301766c6-80a0-4e10-8e8a-8512d8514cd1"),
                            ArrivalTime = new TimeSpan(0, 14, 0, 0, 0),
                            BusId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DepartureTime = new TimeSpan(0, 8, 0, 0, 0),
                            JourneyDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("18252058-a815-4fdf-8650-5a28bd5073ab"),
                            ArrivalTime = new TimeSpan(0, 14, 30, 0, 0),
                            BusId = new Guid("22222222-2222-2222-2222-222222222222"),
                            DepartureTime = new TimeSpan(0, 9, 30, 0, 0),
                            JourneyDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("58c5854e-9f11-4fa7-a440-2464faa24df6"),
                            ArrivalTime = new TimeSpan(0, 14, 0, 0, 0),
                            BusId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DepartureTime = new TimeSpan(0, 8, 0, 0, 0),
                            JourneyDate = new DateTime(2025, 11, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("ce39e00f-a05e-404e-87b4-9e51d55912b5"),
                            ArrivalTime = new TimeSpan(0, 14, 30, 0, 0),
                            BusId = new Guid("22222222-2222-2222-2222-222222222222"),
                            DepartureTime = new TimeSpan(0, 9, 30, 0, 0),
                            JourneyDate = new DateTime(2025, 11, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            RouteId = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("FromCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            DurationMinutes = 360,
                            FromCity = "Dhaka",
                            ToCity = "Chittagong"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            DurationMinutes = 300,
                            FromCity = "Dhaka",
                            ToCity = "Sylhet"
                        });
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusId")
                        .HasColumnType("uuid");

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("integer");

                    b.Property<int>("RowNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BoardingPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BusScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("DroppingPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusScheduleId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("SeatId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.BusSchedule", b =>
                {
                    b.HasOne("BusTicketReservation.Domain.Entities.Bus", "Bus")
                        .WithMany("Schedules")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketReservation.Domain.Entities.Route", "Route")
                        .WithMany("Schedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Seat", b =>
                {
                    b.HasOne("BusTicketReservation.Domain.Entities.Bus", "Bus")
                        .WithMany("Seats")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("BusTicketReservation.Domain.Entities.BusSchedule", "BusSchedule")
                        .WithMany("Tickets")
                        .HasForeignKey("BusScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketReservation.Domain.Entities.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketReservation.Domain.Entities.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusSchedule");

                    b.Navigation("Passenger");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Bus", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.BusSchedule", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Passenger", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Route", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("BusTicketReservation.Domain.Entities.Seat", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
